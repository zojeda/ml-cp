d05 <- th[th$dose==0.5,c("len", "supp")]
d05$len[d05$supp=="VC"]
lvc <- th[th$dose==0.5 th$supp =="VC" & , "len"]
lvc <- th[th$dose==0.5 & th$supp =="VC" , "len"]
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
data(ToothGrowth)
th <- ToothGrowth
str(th)
head(th)
tail(th)
summary(th)
table(th$supp, th$dose)
runTest <- function (doseLevel) {
lvc <- th[th$dose==doseLevel & th$supp =="VC" , "len"]
loj <- th[th$dose==doseLevel & th$supp =="OJ" , "len"]
t.test(lvc, lvc)
}
d05 <- runTest(0.5)
d05$p.value < 0.05
?t.test
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
data(ToothGrowth)
th <- ToothGrowth
str(th)
head(th)
tail(th)
summary(th)
table(th$supp, th$dose)
runTest <- function (doseLevel) {
lvc <- th[th$dose==doseLevel & th$supp =="VC" , "len"]
loj <- th[th$dose==doseLevel & th$supp =="OJ" , "len"]
pValue <- t.test(lvc, loj)$p.value
if(pValue <= 0.05) {
print("rejecting H0: there is a difference in tooth lengh based on supplement")
} else {
print("failling to reject H0: there is not enough evidence regarding to supplement differences on tooth growth")
}
}
runTest(0.5)
runTest(1)
runTest(2)
library(ggplot2)
doseLevel <- 0.5
lvc <- th[th$dose==doseLevel & th$supp =="VC" , "len"]
loj <- th[th$dose==doseLevel & th$supp =="OJ" , "len"]
bp <- ggplot(data=th, aes(x=supp, y=length, fill=length)) + geom_boxplot()
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel]
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=th, aes(x=supp, y=len, fill=len)) + geom_boxplot()
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=l, aes(x=supp, y=len, fill=len)) + geom_boxplot()
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=th, aes(x=supp, y=len, fill=len)) +
facet_wrap(~dose) +
geom_boxplot()
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=th, aes(x=supp, y=len, fill = as.factor(supp))) +
facet_wrap(~dose) +
geom_boxplot()
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=th, aes(x=supp, y=len, fill = as.factor(supp))) +
facet_wrap(~dose)
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=th, aes(x=supp, y=len, fill = as.factor(supp))) +
facet_wrap(~dose) +
geom_boxplot()
bp
library(ggplot2)
doseLevel <- 0.5
l <- th[th$dose==doseLevel,]
bp <- ggplot(data=th, aes(x=supp, y=len, fill = as.factor(supp))) +
facet_wrap(~dose) +
geom_boxplot() + theme(legend.position="none")
bp
geom_boxplot() + theme(legend.position="none")
library(swirl)
swirl()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(hours = 7, minutes = 44)
this_moment <- update(this_moment, hours = 7, minutes = 44)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = hour(depart)+17, minutes = minute(depart)+34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrived <- nyc+hours(15)+minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
info()
skip()
arrive <- depart + hours(15) + minutes(50)
skip()
info()
bye()
Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(swirl)
Sys.getlocale("LC_TIME")
swirl()
info
info()
skip()
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est())
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(children ~ parent, galton)
l_nor <- lm(chil ~ parent, galton)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x -1)
data(mtcars)
lm(mpg ~ weight, mtcars)
lm(mpg ~ wt, mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
1.5*.4
?with
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color="blue")
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=mean(ppp), col="magenta", lwd=4)
abline(v=mean(ppm), col="magenta", lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(ppm2~region, data = pollution, col="red")
boxplot(pm25~region, data = pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(east, col="green")
hist(east$2pm25, col="green")
hist(east$pm25, col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table( state$region )
xyplot( Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(disp, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
info()
bye()
library(swirl)
swirl()
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, Wind, Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par()
lenth(par())
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plogis(airquality$Wind, airquality$Ozone, type = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col="blue", pch="22")
points(may$Wind, may$Ozone, col="blue", pch="22")
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=19)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
a
?legent
?legend
skyp()
skip()
abline(v=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot( airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot( airquality$Ozone, airquality$Solar.R, main =  "Ozone and Solar Radiation" )
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot( airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot( airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot( airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
install.packages('caret')
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?createDataPartition
qplot(training, pch=19)
plot(training, pch=19)
plot(mixtures$CompressiveStrength, training pch=19)
plot(mixtures$CompressiveStrength, training, pch=19)
plot(mixtures$CompressiveStrength, training)
plot(training, 1:length(training))
library(GGally)
install.packages('GGally')
install.packages('GGally')
install.packages('Hmisc')
install.packages('GGally')
install.packages('Hmisc')
library(GGally)
library(Hmisc)
training2 <- training
training2$CompressiveStrength <- cut2(training2$CompressiveStrength, g=4)
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength)
)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data= training, geom = "histogram", main = "Without Log")
qplot(log(Superplasticizer+1), data= training, geom = "histogram", main = "With Log")
log(0)
g1 <- qplot(Superplasticizer, data= training, geom = "histogram", main = "Without Log")
g2 <- qplot(log(Superplasticizer+1), data= training, geom = "histogram", main = "With Log")
grid.arrange(g1,g2)
library(gridExtra)
g1 <- qplot(Superplasticizer, data= training, geom = "histogram", main = "Without Log")
g2 <- qplot(log(Superplasticizer+1), data= training, geom = "histogram", main = "With Log")
grid.arrange(g1,g2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(ggplot2)
library(caret)
ncol(training)
which(sapply(adData,class)=="factor")
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
preProc
preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
View(training)
training[,grep('^IL',names(training))
]
preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
head(segmentationOriginal$Case)
View(segmentationOriginal)
train <- segmentationOriginal[segmentationOriginal$Case=='Train', -2]
View(train)
test <- segmentationOriginal[segmentationOriginal$Case=='Test', -2]
set.seed(125)
CART  <- train(PS ~ ., data = training, method = "rpart")
CART  <- train(PS ~ ., data = train, method = "rpart")
CART  <- train(Class ~ ., data = train, method = "rpart")
CART  <- train(Class ~ ., data = train, method = "rpart")
install.packages('e1071')
CART  <- train(Class ~ ., data = train, method = "rpart")
suppressMessages(library(rattle))
install.packages('rattle')
suppressMessages(library(rattle))
library(pgmm)
install.packages('pgmm')
suppressMessages(library(rattle))
data(olive)
olive = olive[, -1]
library(pgmm)
data(olive)
olive = olive[, -1]
newdata = as.data.frame(t(colMeans(olive)))
modolive <- train(Area ~ ., method = "rpart", data = olive)
predict(modolive, newdata = newdata)
library(rpart.plot)
fancyRpartPlot(modolive$finalModel)
install.packages('rpart.plot')
library(rpart.plot)
fancyRpartPlot(modolive$finalModel)
View(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
setwd("D:/Coursera/datascience/8-MachineLearning/course-project")
knitr::opts_chunk$set(echo = TRUE)
training <- read.csv('pml-testing.csv')
testing <- read.csv('pml-testing.csv')
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
View(testing)
training$classe
